// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/Elephmoon/anagramDictionary/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddDictionary provides a mock function with given fields: words
func (_m *Repository) AddDictionary(words []models.Word) error {
	ret := _m.Called(words)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Word) error); ok {
		r0 = rf(words)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AnagramSearch provides a mock function with given fields: sortedWord
func (_m *Repository) AnagramSearch(sortedWord string) ([]*models.Word, error) {
	ret := _m.Called(sortedWord)

	var r0 []*models.Word
	if rf, ok := ret.Get(0).(func(string) []*models.Word); ok {
		r0 = rf(sortedWord)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Word)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sortedWord)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWord provides a mock function with given fields: _a0
func (_m *Repository) DeleteWord(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDictionary provides a mock function with given fields: offset, limit
func (_m *Repository) GetDictionary(offset int, limit int) ([]*models.Word, error) {
	ret := _m.Called(offset, limit)

	var r0 []*models.Word
	if rf, ok := ret.Get(0).(func(int, int) []*models.Word); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Word)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
