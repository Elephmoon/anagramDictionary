// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/Elephmoon/anagramDictionary/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AddWords provides a mock function with given fields: words
func (_m *Usecase) AddWords(words *models.CreateReq) error {
	ret := _m.Called(words)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.CreateReq) error); ok {
		r0 = rf(words)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AnagramSearch provides a mock function with given fields: _a0
func (_m *Usecase) AnagramSearch(_a0 string) (models.AnagramResponse, error) {
	ret := _m.Called(_a0)

	var r0 models.AnagramResponse
	if rf, ok := ret.Get(0).(func(string) models.AnagramResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.AnagramResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWord provides a mock function with given fields: _a0
func (_m *Usecase) DeleteWord(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShowDictionary provides a mock function with given fields: offset, limit
func (_m *Usecase) ShowDictionary(offset string, limit string) ([]*models.Word, error) {
	ret := _m.Called(offset, limit)

	var r0 []*models.Word
	if rf, ok := ret.Get(0).(func(string, string) []*models.Word); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Word)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
